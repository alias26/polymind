# PolyMind Project .gitignore

# ==============================================
# 환경 변수 및 보안 관련 파일
# ==============================================
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
*.pem
*.key
*.crt
config/secrets.json
**/secrets/
**/.secrets/

# ==============================================
# Python (백엔드)
# ==============================================

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# ==============================================
# Node.js (프론트엔드)
# ==============================================

# Logs
logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# ==============================================
# 데이터베이스
# ==============================================
*.db
*.sqlite
*.sqlite3
*.db-journal
pgdata/
postgres-data/
mysql-data/
mongodb-data/
redis-data/

# Alembic
alembic/versions/__pycache__/

# ==============================================
# Docker
# ==============================================
docker-compose.override.yml
.dockerignore

# ==============================================
# IDE 및 에디터
# ==============================================

# VSCode
.vscode/
!.vscode/extensions.json
!.vscode/settings.json.example

# PyCharm
.idea/
*.swp
*.swo

# Sublime Text
*.sublime-workspace
*.sublime-project

# Vim
*~
*.swp
*.swo
.*.swp
.*.swo

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# ==============================================
# 운영체제
# ==============================================

# macOS
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db

# Dump file
*.stackdump

# Folder config file
[Dd]esktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.cab
*.msi
*.msix
*.msm
*.msp

# Windows shortcuts
*.lnk

# Linux
*~

# temporary files which can be created if a process still has a handle open of a deleted file
.fuse_hidden*

# KDE directory preferences
.directory

# Linux trash folder which might appear on any partition or disk
.Trash-*

# .nfs files are created when an open file is removed but is still being accessed
.nfs*

# ==============================================
# 프로젝트 특화
# ==============================================

# API 키 및 민감 정보
api_keys.txt
secrets.json
private_keys/
certificates/

# 업로드 파일들
uploads/
temp/
tmp/
media/
static/user_uploads/

# 로그 파일들
*.log
logs/
log/

# 백업 파일들
*.bak
*.backup
*.old
*.orig
*.tmp

# 테스트 파일들 (필요시 주석 해제)
# test_data/
# fixtures/
# test_uploads/

# 분석 정리 파일들
PROJECT_ANALYSIS_FOR_README.md
PROJECT*.md

# 스크린샷 및 데모 파일들 (실제 파일은 추가할 예정)
# screenshots/
# demo/

# 캐시 파일들
.cache/
*.cache
.parcel-cache/
.rts2_cache*/
.rpt2_cache*/

# 임시 생성 파일들
.temp/
.tmp/
temp/
tmp/

# ==============================================
# 개발/문서 관련 불필요 파일들
# ==============================================

# 개발 과정에서 생성된 문서들
TODO*.txt
NOTES*.txt
CHANGELOG*.txt
ROADMAP*.txt

# 성능 분석 문서들
PERFORMANCE*.md
OPTIMIZATION*.md
DEPLOYMENT*.md
SECURITY_LOGGING.md
RATE_LIMITING.md

# 개발자 노트들
*.draft
*.notes
*.todo
*.ideas

# 설치/실행 스크립트들 (개발용)
install.sh
install.bat
setup.sh
setup.bat
run_all.bat
db_operations.sh
start_postgresql.sh
start_server.sh
start_postgresql.bat
start.sh
start.bat

# 키 생성 스크립트들
generate_keys.py
create_email_tables.py

# 테스트 파일들
test_*.py
*_test.py
test_*.js
*_test.js
error.txt

# 실험적 파일들
experiment/
playground/
sandbox/
prototype/

# 마이그레이션 백업들
migrations_backup/
old_migrations/

.claude